# 관리자 권한 갖기
sudo: required

# 언어(플랫폼) 선택
language: generic

# 도커 환경 구성
services:
  - docker

# 스크립트를 실행 할 수 있는 테스트 환경 구성
# 여기서는 간단하게 리액트 앱만 테스트
before_install:
  - echo "start creating an image with Dockerfile"
  - docker build -t yjchoi7166/docker-react-app -f ./react-app/Dockerfile.dev ./react-app

# 테스트 실행 스크립트 : 리액트 테스트 스크립트
# 리액트 앱만 생성하기 때문에 테스트 스크립트는 "" 로 설정되어 있음
script:
  - docker run -e CI=true yjchoi7166/docker-react-app npm run test

# 테스트 성공 각각의 이미지 빌드
after_success:
  - echo "React App Test Success"

  # yjchoi7166 : docker hub 계정 id
  - docker build -t yjchoi7166/docker-frontend ./react-app
  - docker build -t yjchoi7166/docker-backend ./nodejs-app
  - docker build -t yjchoi7166/docker-nginx ./nginx

  # 도커 허브 로그인 : 환경 변수 및 파이프라인을 이용하여 비밀번호 전달
  - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_ID" --password-stdin

  # 이미지 push
  - docker push yjchoi7166/docker-frontend
  - docker push yjchoi7166/docker-backend
  - docker push yjchoi7166/docker-nginx

# AWS 배포
deploy:
  edge: true
  provider: elasticbeanstalk
  region: ap-northeast-2
  app: fullstack-docker-app
  env: Fullstackdockerapp-env
  # 빌드 파일을 압축하여 전송할 S3 버킷 : 일라스틱 빈스톡은 해당 버킷을 생성하고 배포 시 참조
  bucket_name: elasticbeanstalk-ap-northeast-2-085771716532
  bucket_path: yj-fullstack-docker-app
  # 해당 브랜치에 push하는 경우에만 배포
  on:
    branch: master
  # travis-ci 환경 변수로 등록한 aws 키 등록
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_PRIVATE_KEY