//Point_LinkedList
//In DLinkedList.h, change typedef int LData => typedef Point* LData


#include "DLinkedList.h"
#include <iostream>
#include <cstdlib>

using namespace std;

int Who_is_first(LData p1,LData p2)
{
	if (p1->xpos > p2->xpos)
		return 1;
	else if (p1->xpos == p2->xpos)
	{
		if (p1->ypos >= p2->ypos)
			return 1;
		else
			return 0;
	}
	else
		return 0;
}

int main()
{
	List list;
	LData data;
	ListInit(&list);
	Set_sort_rule(&list, Who_is_first);

	Point *ppos;

	ppos = (Point*)malloc(sizeof(Point));
	SetPoint(ppos, 1, 1);
	LInsert(&list, ppos);

	ppos = (Point*)malloc(sizeof(Point));
	SetPoint(ppos, 2, 3);
	LInsert(&list, ppos);

	ppos = (Point*)malloc(sizeof(Point));
	SetPoint(ppos, 2, 2);
	LInsert(&list, ppos);

	ppos = (Point*)malloc(sizeof(Point));
	SetPoint(ppos, 1, 5);
	LInsert(&list, ppos);

	ppos = (Point*)malloc(sizeof(Point));
	SetPoint(ppos, 2, 7);
	LInsert(&list, ppos);
	
	cout << "number of data in the list : " << LCount(&list) << endl;

	if (LFirst(&list, &data))
	{
		Show(data);
		while (LNext(&list, &data))
			Show(data);
	}
	cout << endl;

	

	return 0;
}
